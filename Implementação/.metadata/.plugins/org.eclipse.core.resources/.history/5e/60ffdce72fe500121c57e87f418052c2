package br.com.cisterlabs.universidade.controle;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

import br.com.cisterlabs.universidade.entidade.EFuncionario;
import br.com.cisterlabs.universidade.entidade.EPessoa;

public class CControleGeral
{

	public static void main(String[] args)
	{
		try
		{
			Object obj = CControleGeral.gerarPesso();

			// ---------------------------------------------------

			// BUSCAR TODOS FIELD DA CLASSE
			for (Field field : obj.getClass().getSuperclass()
					.getDeclaredFields())
			{
				field.setAccessible(true);
				System.out.println(field.getName() + ": " + field.get(obj));
			}

			// -----------------------------------------------------

			// BUSCAR TODOS FIELD DA SUPER CLASSE
			for (Field field : obj.getClass().getDeclaredFields())
			{
				field.setAccessible(true);
				System.out.println(field.getName() + ": " + field.get(obj));
			}

			// -----------------------------------------------------

			// BUSCAR FIELD ESPECIFICO
			Field field = obj.getClass().getDeclaredField("cargo");

			// HABILITAR EDIÇÃO DE VARIAVEL PRIVATE
			field.setAccessible(true);

			// INSERIR VALORES NA VARIAVEL
			field.set(obj, "NOVO PROGRAMADOR");
			System.out.println(field.getName() + ": " + field.get(obj));

			// ---------------------------------------------------

			// BUSCAR VARIAVEL PUBLICA
			Field fieldDois = obj.getClass().getField("cargoPublico");

			// INSEIR VALORES NA VARIAVEL PUBLICA
			fieldDois.set(obj, "CARGO PUBLICO");
			System.out.println(fieldDois.getName() + ": " + fieldDois.get(obj));

			// -----------------------------------------------------

			// METODOS

			// ------------------------------------------------------

			//METODO PUBLIC 
			 System.out.println("RETORNO DE METODO: " + obj.getClass().getDeclaredMethod("retornoString", null).invoke(obj, null));
			
			 //-----------------------------------------------------
			 
			 //METODO ESTATICO PRIVATE E COM PARAMETROS
			 Method metodo = obj.getClass().getDeclaredMethod("retornoStatic", String.class);
			 metodo.setAccessible(true);
			 String retorno = (String) metodo.invoke(obj, "TESTE UM");
			 
			 System.out.println("RETORNO DE METODO STATICO E COM PARAMETROS : "+ retorno);
			 
			 // ------------------------------------------------------
			 
			 //CONSTRUTOR
			 
			 //------------------------------------------------------
			
			 
			 //CONSTRUTOR SEM ARGUMENTO
			Constructor<EPessoa> construtor = (Constructor<EPessoa>) EPessoa.class.getDeclaredConstructor();
			 EPessoa pessoa = construtor.newInstance();
			 
			 System.out.println("EXECUTANDO CONSTRUTOR: "+ pessoa.getNome()+" "+ pessoa.getSobrenome());
			 
			 
			 //---------------------------------------------------------
			 
			 //CONSTRUTOR COM ARGUMENTOS
			 
			 pessoa = new EPessoa();
			 
			 Constructor<EPessoa> construtorDois = pessoa.getClass().getDeclaredConstructor(parameterTypes)

		}
		catch (Exception e)
		{
			e.printStackTrace();
		}

	}

	public static EFuncionario gerarPesso()
	{

		EFuncionario funcionario = new EFuncionario();

		funcionario.setNome("Guilherme");
		funcionario.setSobrenome("Berghauser");
		funcionario.setCargo("Programador");

		return funcionario;

	}
}
